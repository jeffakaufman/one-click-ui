/*
 * File: app/controller/AppController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('OneClick.controller.AppController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.appController',

    requires: [
        'Ext.MessageBox'
    ],

    config: {
        models: [
            'Campaign'
        ],
        stores: [
            'Campaigns'
        ],

        refs: {
            loginContainer: 'logincontainer',
            mainContainer: 'maincontainer',
            mainTabPanel: 'maintabpanel',
            homeContainer: 'homecontainer',
            profileContainer: 'profilecontainer',
            reportHome: 'reporthome',
            activeCampaignList: 'activecampaignlist',
            unsuccessCampaignList: 'unsuccesscampaignlist',
            successCampaignList: 'successcampaignlist',
            inactiveCampaignList: 'inactivecampaignlist',
            campaignDetailContainer: 'campaigndetailcontainer',
            campaignListContainer: 'campaignlistcontainer',
            reportContainer: 'reportcontainer',
            reportingContainer: 'reportingcontainer',
            rptPercentChange: 'rptpercentchange',
            rptPostEngagement: 'rptpostengagement',
            rptScoreDetails: 'rptscoredetails',
            rptScore: 'rptscore',
            navigationContainer: 'navigationcontainer',
            appInitContainer: 'appinitcontainer'
        },

        control: {
            "logincontainer > #btnLogin": {
                tap: 'loginContainer_btnLogin_Tap'
            },
            "activecampaignlist": {
                itemtap: 'activeCampaignList_ItemTap'
            },
            "successcampaignlist": {
                itemtap: 'successCampaignList_ItemTap'
            },
            "unsuccesscampaignlist": {
                itemtap: 'unsuccessCampaignList_ItemTap'
            },
            "inactivecampaignlist": {
                itemtap: 'inactiveCampaignList_ItemTap'
            },
            "campaigndetailcontainer > #headerBar > #btnBack": {
                tap: 'campaignDetailContainer_btnBack_Tap'
            },
            "reportingcontainer > #btnChooseReport": {
                toggle: 'reportingContainer_btnChooseReport_Toggle'
            },
            "reportingcontainer": {
                activate: 'reportingContainer_onActivate'
            },
            "reporthome": {
                activate: 'reportHome_onActivate'
            },
            "toolbar > #btnNavigation": {
                tap: 'btnNavigation_Tap'
            },
            "navigationcontainer > button": {
                tap: 'navigationContainer_btnHome_Tap'
            },
            "profilecontainer": {
                activate: 'profileContainer_onActive'
            },
            "homecontainer": {
                activate: 'homeContainer_onActive'
            },
            "tabpanel": {
                activate: 'onTabpanelActivate'
            },
            "maincontainer": {
                initialize: 'mainContainer_onContainerActivate'
            }
        }
    },

    loginContainer_btnLogin_Tap: function(button, e, eOpts) {
        var me = this,
            mainContainer = this.getMainContainer(),
            mainTabPanel = this.getMainTabPanel(),
            homeContainer = this.getHomeContainer(),
            activeCampaignList = this.getActiveCampaignList(),
            inactiveCampaignList = this.getInactiveCampaignList(),
            successCampaignList = this.getSuccessCampaignList(),
            unsuccessCampaignList = this.getUnsuccessCampaignList(),
            mainWidth = (window.innerWidth > 0) ? window.innerWidth : screen.width,
            recordCount = 0;

        if (enableFacebook){
            FB.login(
            function(response) {
                if (response.authResponse) {
                    FB.api('/me', function(response) {
                        storeUserInfo();
                        userName = response.name;
                        userID = response.id;
                        userEmail = response.email;
                        me.buildMainContainer();
                    },
                    { scope: "email" }
                    );
                }
            },
            { scope: "email" });
        }else{
            me.buildMainContainer();
        }
    },

    activeCampaignList_ItemTap: function(dataview, index, target, record, e, eOpts) {
        this.composeCampaignDetailContainer(record);
    },

    successCampaignList_ItemTap: function(dataview, index, target, record, e, eOpts) {
        this.composeCampaignDetailContainer(record);
    },

    unsuccessCampaignList_ItemTap: function(dataview, index, target, record, e, eOpts) {
        this.composeCampaignDetailContainer(record);
    },

    inactiveCampaignList_ItemTap: function(dataview, index, target, record, e, eOpts) {
        this.composeCampaignDetailContainer(record);
    },

    campaignDetailContainer_btnBack_Tap: function(button, e, eOpts) {
        var homeContainer = this.getHomeContainer(),
            campaignListContainer = this.getCampaignListContainer();
        homeContainer.setActiveItem(campaignListContainer);
    },

    reportingContainer_btnChooseReport_Toggle: function(segmentedbutton, button, isPressed, eOpts) {
        var reportContainer = this.getReportContainer(),
            rptPercentChange = this.getRptPercentChange(),
            rptPostEngagement = this.getRptPostEngagement(),
            rptScoreDetails = this.getRptScoreDetails(),
            rptScore = this.getRptScore();
        if (isPressed) {
            if (button.getText() == '% Change'){
                rptPercentChange.getStore().removeAll(false);
                rptPercentChange.getStore().add({
                    "id": 0,
                    "timeaxis": "&nbsp;",
                    "mylikes": "My Likes",
                    "mycomments": "My Comments",
                    "cmplikes": "Competitor Likes",
                    "cmpcomments":"Competitor Comments"
                });
                rptPercentChange.getStore().add({
                    "id": 0,
                    "timeaxis": "&nbsp;",
                    "mylikes": "My Likes",
                    "mycomments": "My Comments",
                    "cmplikes": "Competitor Likes",
                    "cmpcomments":"Competitor Comments"
                });
                rptPercentChange.getStore().add(percentChanges);  
                reportContainer.setActiveItem(rptPercentChange);

            } else if (button.getText() == 'Post Engagment'){
                rptPostEngagement.getStore().removeAll(false);
                rptPostEngagement.getStore().add({
                    "id": 0,
                    "timeaxis": "&nbsp;",
                    "mylikes": "My Likes",
                    "mycomments": "My Comments",
                    "cmplikes": "Competitor Likes",
                    "cmpcomments":"Competitor Comments"
                })
                rptPostEngagement.getStore().add(postChanges);
                reportContainer.setActiveItem(rptPostEngagement);
            } else if (button.getText() == 'Score'){
                rptScoreDetails.getStore().removeAll(false);
                rptScoreDetails.getStore().add({
                    "id": 0,
                    "timeaxis": "&nbsp;",
                    "likes": "My Likes",
                    "comments": "My Comments",
                    "cmplikes": "Competitor Likes",
                    "cmpcomments":"Competitor Comments"
                })
                rptScoreDetails.getStore().add(scores);
                reportContainer.setActiveItem(rptScoreDetails);
            }

        }
    },

    reportingContainer_onActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var reportContainer = this.getReportContainer(),
            rptPercentChange = this.getRptPercentChange();
        rptPercentChange.getStore().removeAll(true);
        rptPercentChange.getStore().load({
            callback: function(records, operation, success) {
                recordCount = records.length;
                this.insert(0, {
                    "id": 0,
                    "timeaxis": "&nbsp;",
                    "mylikes": "My Likes",
                    "mycomments": "My Comments",
                    "cmplikes": "Competitor Likes",
                    "cmpcomments":"Competitor Comments"
                });
            }
        });
        rptPercentChange.getStore().add(percentChanges);
    },

    reportHome_onActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        newActiveItem.removeAll();
        var reportingContainer = this.getReportingContainer()

        var items = [], record = undefined;
        for (var i = 0; i < activeCampaigns.length; i++){
            startdate = activeCampaigns[i].get('startdate');
            var year = startdate.substring(2,4);
            var month = startdate.substring(5,7);
            var day = startdate.substring(8,10);
            var hour = startdate.substring(11,13);
            var mins = startdate.substring(14,16);
            record = {
                title : activeCampaigns[i].get('name'),
                timestamp: month + '/' + day + '/' + year +' ' + hour + ':' + mins,
                recID : activeCampaigns[i].get('id'),
                collapsed: true,
                layout: 'fit',
                height: 100
            }
            items.push(record);
        }
        var reportContainers = 
        {
            xtype: 'container',
            margin: '0.5em',
            layout     : 
            {
                type : 'accordion',
                toggleOnTitlebar : true,
                mode : 'SINGLE'
            },
            scrollable : 'vertical',
            items      : items

        };
        newActiveItem.add(reportContainers);
    },

    btnNavigation_Tap: function(button, e, eOpts) {
        var mainTabPanel = this.getMainTabPanel(),
            navigationContainer = this.getNavigationContainer();
        mainTabPanel.setActiveItem(navigationContainer);
        navigationContainer.query('#btnHome')[0].setBadgeText(badgeNumber);
    },

    navigationContainer_btnHome_Tap: function(button, e, eOpts) {
        var mainContainer = this.getMainContainer(),
            loginContainer = this.getLoginContainer(),
            mainTabPanel = this.getMainTabPanel(),
            homeContainer = this.getHomeContainer(),
            profileContainer = this.getProfileContainer(),
            reportHome = this.getReportHome();
        if(button.getItemId() == 'btnHome'){
            mainTabPanel.setActiveItem(homeContainer);
        } else if (button.getItemId() == 'btnProfile'){
            mainTabPanel.setActiveItem(profileContainer);
        } else if(button.getItemId() == 'btnCampaign'){
            mainTabPanel.setActiveItem(reportHome);
        } else if(button.getItemId() == 'btnLogout'){
            Ext.Msg.confirm(
            "Log out",
            "Are you sure ?",
            function(buttonId) {
                if(buttonId === 'yes') {
                    removeUserInfo();
                    mainContainer.setActiveItem(loginContainer);
                }
            }, 
            this // scope of the controller 
            );

        }
    },

    profileContainer_onActive: function(newActiveItem, container, oldActiveItem, eOpts) {
        container.query('#name')[0].setValue(userName);
        container.query('#email')[0].setValue(userEmail);
        container.query('#mobile')[0].setValue(userPhone);
    },

    homeContainer_onActive: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.componseCampaignListContainer();
    },

    onTabpanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var mainTabPanel = this.getMainTabPanel();
        mainTabPanel.setActiveItem(0);
        this.componseCampaignListContainer();
    },

    mainContainer_onContainerActivate: function(component, eOpts) {
        if (userID && userEmail){
            this.buildMainContainer();
        }
    },

    composeCampaignDetailContainer: function(record) {
        var homeContainer = this.getHomeContainer(),
            campaignDetailContainer = this.getCampaignDetailContainer(),
            summaryView = campaignDetailContainer.down('#summaryView'),
            headerBar = campaignDetailContainer.down('#headerBar');
        var year = record.get('startdate').substring(0,4);
        var month = record.get('startdate').substring(5,7);
        var day = record.get('startdate').substring(8,10);
        record.data.str_startdate = month + "/" + day;
        record.data.image = userAvatar;
        campaignDetailContainer.query('#startdate')[0].setValue({
            month: month,
            day  : day,
            year : year
        });
        year = record.get('enddate').substring(0,4);
        month = record.get('enddate').substring(5,7);
        day = record.get('enddate').substring(8,10);

        if (record.get('owner_page') == null){
            campaignDetailContainer.query('#pagedata')[0].setLabel('Post')
            record.data.owner = record.get('owner_post');
        }else {
            campaignDetailContainer.query('#pagedata')[0].setLabel('Page')
            record.data.owner = record.get('owner_page');
        }
        summaryView.setData(record.data);

        campaignDetailContainer.query('#userengagement')[0].setValue(record.get('userengagement'));
        campaignDetailContainer.query('#pagedata')[0].setValue(record.get('header'));

        campaignDetailContainer.query('#enddate')[0].setValue({
            month: month,
            day  : day,
            year : year
        });


        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: 'Connecting...'
        });  
        campaignDetailContainer.query('#budget')[0].setValue(formatCurrency(record.get('budget')));


        homeContainer.setActiveItem(campaignDetailContainer);
    },

    componseCampaignListContainer: function() {
        var me = this,
            mainContainer = this.getMainContainer(),
            mainTabPanel = this.getMainTabPanel(),
            homeContainer = this.getHomeContainer(),
            activeCampaignList = this.getActiveCampaignList(),
            inactiveCampaignList = this.getInactiveCampaignList(),
            successCampaignList = this.getSuccessCampaignList(),
            unsuccessCampaignList = this.getUnsuccessCampaignList(),
            mainWidth = (window.innerWidth > 0) ? window.innerWidth : screen.width,
            recordCount = 0;


        activeCampaignList.getStore().removeAll(false);
        inactiveCampaignList.getStore().removeAll(false);
        successCampaignList.getStore().removeAll(false);
        unsuccessCampaignList.getStore().removeAll(false);
        activeCampaigns = [];
        inactiveCampaigns = [];
        successCampaigns = [];
        unsuccessCampaigns = [];

        resetBadgeNumber();

        if (accessToken != ''){
            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'Connecting...'
            });       

            Ext.Ajax.request({
                method : "GET",        
                headers: {
                    'Authorization' : 'Token ' + accessToken
                },
                url: basicURL + "campaigns/.json",
                withCredentials: true,
                useDefaultXhrHeader: false,
                success: function(response){
                    Ext.Viewport.setMasked(false);
                    var text = response.responseText;
                    response = Ext.decode(response.responseText);
                    activeCampaigns = [];
                    inactiveCampaigns = [];
                    successCampaigns = [];
                    unsuccessCampaigns = [];
                    if (response.length > 0){
                        for (var i = 0; i < response.length; i++){
                            var rec = response[i];
                            var record = Ext.create('OneClick.model.Campaign', {
                                id : rec.id,
                                header : rec.name,
                                name : rec.title,
                                description : rec.description,
                                image : '',
                                status : rec.status,
                                userengagement : rec.user_engagement,
                                startdate : rec.start_dt,
                                enddate : rec.end_dt,
                                budget : rec.price,
                                fblikes : rec.likes,
                                fbposts : rec.comments,
                                score : rec.likes + rec.comments,
                                fbpage : rec.owner_page,
                                owner_page : rec.owner_page,
                                owner_post : rec.owner_post
                            });
                            if (record.get('status') == "1"){
                                activeCampaigns.push(record);
                            } else if (record.get('status') == "0"){
                                inactiveCampaigns.push(record);
                            } else if (record.get('status') == "2"){
                                successCampaigns.push(record);
                            } else if (record.get('status') == "3"){
                                unsuccessCampaigns.push(record);
                            };


                        }
                        activeCampaignList.getStore().add(activeCampaigns);
                        recordCount = activeCampaigns.length;

                        activeCampaignList.setHeight(recordCount * 47);
                        activeCampaignList.setWidth(mainWidth - 20);

                        inactiveCampaignList.getStore().add(inactiveCampaigns);
                        recordCount = inactiveCampaigns.length;
                        inactiveCampaignList.setHeight(recordCount * 47);
                        inactiveCampaignList.setWidth(mainWidth - 20);

                        unsuccessCampaignList.getStore().add(unsuccessCampaigns);
                        recordCount = unsuccessCampaigns.length;
                        unsuccessCampaignList.setHeight(recordCount * 47);
                        unsuccessCampaignList.setWidth(mainWidth - 20);

                        successCampaignList.getStore().add(successCampaigns);
                        recordCount = successCampaigns.length;
                        successCampaignList.setHeight(recordCount * 47);
                        successCampaignList.setWidth(mainWidth - 20);
                    } else {
                        alert("You don't have any campaigns.")
                    }
                },
                failure : function (resposne){
                    Ext.Viewport.setMasked(false);
                }
            });



        }


    },

    buildMainContainer: function() {
        var me = this,
            mainContainer = this.getMainContainer(),
            mainTabPanel = this.getMainTabPanel(),

            homeContainer = this.getHomeContainer(),
            appInitContainer = this.getAppInitContainer(),
            loginContainer = this.getLoginContainer(),
            activeCampaignList = this.getActiveCampaignList(),
            inactiveCampaignList = this.getInactiveCampaignList(),
            successCampaignList = this.getSuccessCampaignList(),
            unsuccessCampaignList = this.getUnsuccessCampaignList(),
            mainWidth = (window.innerWidth > 0) ? window.innerWidth : screen.width,
            recordCount = 0;
        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: 'Connecting...'
        });
        mainContainer.setActiveItem(appInitContainer);
        Ext.Ajax.request({
            method: "POST",
            url: basicURL + "auth/",
            withCredentials: true,
            useDefaultXhrHeader: false,
            params: {
                id: userID,
                email: userEmail
            },
            success: function(response){

                Ext.Viewport.setMasked(false);
                var response = Ext.decode(response.responseText);                        	
                if (response.token){
                    accessToken = response.token;
                    savePushToken();
                    if (getUserInformation()){                    
                        mainContainer.setActiveItem(mainTabPanel);

                    };
                }
            },
            failure: function(response){
                Ext.Viewport.setMasked(false);
                if ((!response) || (!response.responseText)){
                    alert("Sorry, you can't login. Please try later.");
                    mainContainer.setActiveItem(loginContainer);
                    return;
                };
                var response = Ext.decode(response.responseText);
                if (response.non_field_errors){
                    alert(response.non_field_errors[0]);
                }
                mainContainer.setActiveItem(loginContainer);
            }
        });

    },

    init: function(application) {

    }

});